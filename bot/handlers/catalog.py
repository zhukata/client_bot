import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from bot.database.cart_db import add_to_cart
from bot.logging_config import logger
from bot.database.catalog_db import (
    get_categories, get_product, get_subcategories, get_products,
    count_categories, count_subcategories, count_products,
    ITEMS_PER_PAGE
)
from bot.handlers.callback import (
    CategoryCallback, SubcategoryCallback, ProductCallback,
    AddToCartCallback, SetQuantityCallback, ConfirmAddCallback
)


router = Router()


async def generate_pagination_keyboard(items, total_count, callback_factory, page):
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    buttons = [
        [InlineKeyboardButton(text=item.name, callback_data=callback_factory(id=item.id, page=page).pack())]
        for item in items
    ]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_factory(id=0, page=page - 1).pack()))
    if (page + 1) * ITEMS_PER_PAGE < total_count:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=callback_factory(id=0, page=page + 1).pack()))

    if nav_buttons:
        buttons.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_handler(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    categories = await get_categories(0, ITEMS_PER_PAGE)
    total_count = await count_categories()
    keyboard = await generate_pagination_keyboard(categories, total_count, CategoryCallback, 0)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@router.callback_query(CategoryCallback.filter())
async def category_handler(callback: CallbackQuery, callback_data: CategoryCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    category_id = callback_data.id
    page = callback_data.page

    subcategories = await get_subcategories(category_id, page * ITEMS_PER_PAGE, ITEMS_PER_PAGE)
    total_count = await count_subcategories(category_id)
    keyboard = await generate_pagination_keyboard(subcategories, total_count, SubcategoryCallback, page)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(SubcategoryCallback.filter())
async def subcategory_handler(callback: CallbackQuery, callback_data: SubcategoryCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    subcategory_id = callback_data.id
    page = callback_data.page

    products = await get_products(subcategory_id, page * ITEMS_PER_PAGE, ITEMS_PER_PAGE)
    total_count = await count_products(subcategory_id)
    keyboard = await generate_pagination_keyboard(products, total_count, ProductCallback, page)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(ProductCallback.filter())
async def product_handler(callback: CallbackQuery, callback_data: ProductCallback):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    product_id = callback_data.id

    product = await get_product(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    caption = f"<b>{product.name}</b>\n\n{product.description}\n\n–¶–µ–Ω–∞: {product.price} ‚ÇΩ"
    image_path = os.path.join("", str(product.image) or "")

    if product.image and os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo=photo,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=AddToCartCallback(id=product_id).pack())],
                ]
            ),
            parse_mode="HTML"
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="HTML")
    await callback.answer()


@router.callback_query(AddToCartCallback.filter())
async def add_to_cart_handler(callback: CallbackQuery, callback_data: AddToCartCallback):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    product_id = callback_data.id

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=SetQuantityCallback(id=product_id, quantity=i).pack())]
        for i in range(1, 6)
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(SetQuantityCallback.filter())
async def set_quantity_handler(callback: CallbackQuery, callback_data: SetQuantityCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    product_id = callback_data.id
    quantity = callback_data.quantity

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=ConfirmAddCallback(id=product_id, quantity=quantity).pack())],
    ])
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {quantity} —à—Ç. –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(ConfirmAddCallback.filter())
async def confirm_add_to_cart(callback: CallbackQuery, callback_data: ConfirmAddCallback):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    product_id = callback_data.id
    quantity = callback_data.quantity

    user_id = callback.from_user.id
    try:
        await add_to_cart(user_id, product_id, quantity)
        await callback.message.edit_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    await callback.answer()
