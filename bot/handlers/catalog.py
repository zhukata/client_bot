import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from bot.database.cart_db import add_to_cart
from bot.kbds.catalog_kbds import (
    get_category_keyboard, get_subcategory_keyboard, get_product_keyboard
)
from bot.handlers.callback import (
    CategoryCallback, SubcategoryCallback, ProductCallback,
    AddToCartCallback, SetQuantityCallback, ConfirmAddCallback
)
from bot.logging_config import logger
from bot.database.catalog_db import get_categories, get_product, get_subcategories, get_products


router = Router()


@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_handler(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞.")
    categories = await get_categories()
    keyboard = get_category_keyboard(categories, page=1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@router.callback_query(CategoryCallback.filter())
async def category_handler(callback: CallbackQuery, callback_data: CategoryCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –≤ category_handler: {callback.data}")
    category_id = callback_data.id
    page = callback_data.page

    if not category_id:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        categories = await get_categories()
        keyboard = get_category_keyboard(categories, page)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories = await get_subcategories(category_id)
        keyboard = get_subcategory_keyboard(subcategories, page, category_id)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
    
    await callback.answer()


@router.callback_query(SubcategoryCallback.filter())
async def subcategory_handler(callback: CallbackQuery, callback_data: SubcategoryCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –≤ subcategory_handler: {callback.data}")
    subcategory_id = callback_data.id
    page = callback_data.page
    category_id = callback_data.category_id

    if subcategory_id is None and category_id is not None:
        # –≠—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        subcategories = await get_subcategories(category_id)
        keyboard = get_subcategory_keyboard(subcategories, page, category_id)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
    elif subcategory_id is None and category_id is None:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = await get_categories()
        keyboard = get_category_keyboard(categories, page=1)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products = await get_products(subcategory_id)
        keyboard = get_product_keyboard(products, page=1, subcategory_id=subcategory_id, category_id=category_id)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=keyboard
        )
    
    await callback.answer()


@router.callback_query(ProductCallback.filter())
async def product_handler(callback: CallbackQuery, callback_data: ProductCallback):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –≤ product_handler: {callback.data}")
    product_id = callback_data.id
    page = callback_data.page
    subcategory_id = callback_data.subcategory_id

    if product_id is None and subcategory_id is not None:
        # –≠—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç–æ–≤–∞—Ä–æ–≤
        products = await get_products(subcategory_id)
        keyboard = get_product_keyboard(products, page, subcategory_id)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=keyboard
        )
    elif product_id is None and subcategory_id is None:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = await get_categories()
        keyboard = get_category_keyboard(categories, page=1)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product = await get_product(product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        caption = f"<b>{product.name}</b>\n\n{product.description}\n\n–¶–µ–Ω–∞: {product.price} ‚ÇΩ"
        image_path = os.path.join("", str(product.image) or "")

        if product.image and os.path.exists(image_path):
            photo = FSInputFile(image_path)
            await callback.message.answer_photo(
                photo=photo,
                caption=caption,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=AddToCartCallback(id=product_id).pack())],
                    ]
                ),
                parse_mode="HTML"
            )
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="HTML")
    
    await callback.answer()


@router.callback_query(AddToCartCallback.filter())
async def add_to_cart_handler(callback: CallbackQuery, callback_data: AddToCartCallback):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –≤ add_to_cart_handler: {callback.data}")
    product_id = callback_data.id

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=SetQuantityCallback(id=product_id, quantity=i).pack())]
        for i in range(1, 6)
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(SetQuantityCallback.filter())
async def set_quantity_handler(callback: CallbackQuery, callback_data: SetQuantityCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –≤ set_quantity_handler: {callback.data}")
    product_id = callback_data.id
    quantity = callback_data.quantity

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=ConfirmAddCallback(id=product_id, quantity=quantity).pack())],
    ])
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {quantity} —à—Ç. –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(ConfirmAddCallback.filter())
async def confirm_add_to_cart(callback: CallbackQuery, callback_data: ConfirmAddCallback):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –≤ confirm_add_to_cart: {callback.data}")
    product_id = callback_data.id
    quantity = callback_data.quantity

    user_id = callback.from_user.id
    try:
        await add_to_cart(user_id, product_id, quantity)
        await callback.message.edit_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    await callback.answer()
