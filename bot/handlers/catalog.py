import logging
import os
from aiogram.types import FSInputFile
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.database import (
    get_categories, get_product, get_subcategories, get_products,
    count_categories, count_subcategories, count_products,
    ITEMS_PER_PAGE
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

router = Router()

async def generate_pagination_keyboard(items, total_count, callback_prefix, page):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    buttons = [[InlineKeyboardButton(text=item.name, callback_data=f"{callback_prefix}_{item.id}")] for item in items]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{callback_prefix}_page_{page - 1}"))
    if (page + 1) * ITEMS_PER_PAGE < total_count:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"{callback_prefix}_page_{page + 1}"))

    if nav_buttons:
        buttons.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_handler(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    categories = await get_categories(0, ITEMS_PER_PAGE)
    total_count = await count_categories()
    keyboard = await generate_pagination_keyboard(categories, total_count, "category", 0)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("category_page_"))
async def category_pagination_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    page = int(callback.data.split("_")[-1])
    categories = await get_categories(page * ITEMS_PER_PAGE, ITEMS_PER_PAGE)
    total_count = await count_categories()
    keyboard = await generate_pagination_keyboard(categories, total_count, "category", page)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("category_"))
async def category_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    category_id = int(callback.data.split("_")[1])
    subcategories = await get_subcategories(category_id, 0, ITEMS_PER_PAGE)
    total_count = await count_subcategories(category_id)
    keyboard = await generate_pagination_keyboard(subcategories, total_count, f"subcategory_{category_id}", 0)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("subcategory_page_"))
async def subcategory_pagination_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    parts = callback.data.split("_")
    category_id = int(parts[1])
    page = int(parts[-1])
    subcategories = await get_subcategories(category_id, page * ITEMS_PER_PAGE, ITEMS_PER_PAGE)
    total_count = await count_subcategories(category_id)
    keyboard = await generate_pagination_keyboard(subcategories, total_count, f"subcategory_{category_id}", page)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("subcategory_"))
async def subcategory_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    subcategory_id = int(callback.data.split("_")[1])
    products = await get_products(subcategory_id, 0, ITEMS_PER_PAGE)
    total_count = await count_products(subcategory_id)
    keyboard = await generate_pagination_keyboard(products, total_count, f"product_{subcategory_id}", 0)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("product_page_"))
async def product_pagination_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    parts = callback.data.split("_")
    subcategory_id = int(parts[1])
    page = int(parts[-1])
    products = await get_products(subcategory_id, page * ITEMS_PER_PAGE, ITEMS_PER_PAGE)
    total_count = await count_products(subcategory_id)
    keyboard = await generate_pagination_keyboard(products, total_count, f"product_{subcategory_id}", page)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("product_"))
async def product_handler(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    product_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –ë–î
    product = await get_product(product_id)
    if not product:
        logging.warning(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    caption = f"<b>{product.name}</b>\n\n{product.description}\n\n–¶–µ–Ω–∞: {product.price} ‚ÇΩ"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = os.path(str(product.image) or "")
    logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
    
    if product.image and os.path.exists(image_path):
        photo = FSInputFile(image_path)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        await callback.message.answer_photo(
            photo=photo,
            caption=caption,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"subcategory_{product.category_id}")]
                ]
            ),
            parse_mode="HTML"
        )
    else:
        logging.error("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.message.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="HTML")
    
    await callback.answer()

