from aiogram import Bot, Router, F
from aiogram.types import (
    CallbackQuery, LabeledPrice, InlineKeyboardMarkup,
    InlineKeyboardButton, Message, PreCheckoutQuery
)
from aiogram.exceptions import TelegramBadRequest

from bot.logging_config import logger
from bot.database.cart_db import clear_cart
from bot.database.order_db import get_order
from bot.config import Y_KASSA_TOKEN, BOT_TOKEN
from bot.excel import save_order_to_excel


router: Router = Router()
bot: Bot = Bot(BOT_TOKEN)


@router.callback_query(F.data.startswith('pay_'))
async def process_payment(callback: CallbackQuery) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ–ø–ª–∞—Ç—É.")

    try:
        order_id = int(callback.data.split("_")[1])
        order = await get_order(order_id)
        if not order:
            raise ValueError("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    prices = [LabeledPrice(
        label=f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞  #{order.id}',
        amount=int(float(order.total_price) * 100)
    )]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", pay=True)],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_pay_{order.id}")]
        ]
    )
    description = f"""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π.\n
                    –û–ø–ª–∞—Ç–∏—Ç–µ {order.total_price}‚ÇΩ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É."""

    try:
        await bot.send_invoice(
            chat_id=user_id,
            title=f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}',
            description=description,
            payload=str(order.id),
            provider_token=Y_KASSA_TOKEN,
            currency='rub',
            prices=prices,
            reply_markup=keyboard
        )
        logger.info(f"–ò–Ω–≤–æ–π—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")

    await callback.message.answer("–°–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –æ–ø–ª–∞—Ç—ã")


@router.callback_query(F.data.startswith('cancel_pay_'))
async def cancel_payment(callback: CallbackQuery) -> None:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–ª–∞—Ç—É.")
    await callback.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.delete()


@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {pre_checkout_q.id} –ø—Ä–æ–π–¥–µ–Ω–∞.")


@router.message(F.successful_payment)
async def process_successful_payment(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É"""
    order_id = int(message.successful_payment.invoice_payload)
    user_id = message.from_user.id
    logger.info(f"–ü–ª–∞—Ç–µ–∂ –∑–∞ –∑–∞–∫–∞–∑ {order_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –≤ Excel
    try:
        await save_order_to_excel(order_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id} –≤ Excel: {e}")

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    try:
        await clear_cart(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")

    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
        "–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ!"
    )
