import logging
from aiogram import Bot, Router, F
from aiogram.types import CallbackQuery, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton, Message, PreCheckoutQuery
from bot.database.cart_db import clear_cart
from bot.database.catalog_db import get_client
from bot.database.order_db import get_order
from bot.config import Y_KASSA_TOKEN, BOT_TOKEN
# from bot.utils.excel import save_order_to_excel

router = Router()
bot = Bot(BOT_TOKEN)

@router.callback_query(F.data.startswith('pay_'))
async def process_payment(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞"""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ–ø–ª–∞—Ç—É.")

    order_id = int(callback.data.split("_")[1])
    order = await get_order(order_id)

    if not order:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logging.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    prices = [LabeledPrice(
        label=f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}',
        amount=int(float(order.total_price) * 100)
    )]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", pay=True)],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_pay_{order.id}")]
        ]
    )

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}',
        description=f'–û–ø–ª–∞—Ç–∏—Ç–µ {order.total_price}‚ÇΩ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É.',
        payload=f"{order.id}",
        provider_token=Y_KASSA_TOKEN,
        currency='rub',
        prices=prices,
        reply_markup=keyboard
    )

    logging.info(f"–ò–Ω–≤–æ–π—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await callback.message.delete()


@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    logging.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {pre_checkout_q.id} –ø—Ä–æ–π–¥–µ–Ω–∞.")


@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É"""
    order_id = int(message.successful_payment.invoice_payload)
    logging.info(f"–ü–ª–∞—Ç–µ–∂ –∑–∞ –∑–∞–∫–∞–∑ {order_id} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.")

    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –≤ Excel
    # await save_order_to_excel(order_id)
    
    # —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    await clear_cart(message.from_user.id)

    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
        "–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ!"
    )
