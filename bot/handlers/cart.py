import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from bot.database.cart_db import get_cart_items, remove_from_cart
from bot.handlers.callback import RemoveFromCartCallback


router = Router()
logging.basicConfig(level=logging.INFO)


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def cart_handler(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = message.from_user.id
    try:
        cart_items = await get_cart_items(user_id)
        logging.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {cart_items}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = "üõç –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n\n"
    buttons = []

    for item in cart_items:
        # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ
        callback_data = RemoveFromCartCallback(id=item.id).pack()
        logging.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω callback_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {callback_data}")

        text += f"üìå {item.product.name} ‚Äî {item.quantity} —à—Ç.\n"
        buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {item.product.name}",
                callback_data=callback_data
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    buttons.append([
        InlineKeyboardButton(
            text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data="checkout"
        )
    ])

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã.")


@router.callback_query(lambda c: c.data.startswith("remove:"))
async def remove_from_cart_handler(callback: CallbackQuery):
    try:
        cart_item_id = int(callback.data.split(":")[1])
        logging.info(f"–£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å ID: {cart_item_id}")
        await remove_from_cart(cart_item_id)
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
