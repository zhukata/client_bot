from aiogram import Router,  F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from bot.logging_config import logger
from bot.database.cart_db import get_cart_items
from bot.database.order_db import create_order


router = Router()


class OrderForm(StatesGroup):
    full_name = State()
    phone = State()
    address = State()


@router.callback_query(F.data == "checkout")
async def start_order(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(OrderForm.full_name)
    await callback.answer()


@router.message(OrderForm.full_name)
async def process_full_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –§–ò–û –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω"""
    await state.update_data(full_name=message.text)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderForm.phone)


@router.message(OrderForm.phone)
async def process_phone(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å"""
    await state.update_data(phone=message.text)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderForm.address)


@router.message(OrderForm.address)
async def process_address(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å, —Å–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥"""
    user_id = message.from_user.id
    data = await state.get_data()

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ state: {data}")

    full_name = data['full_name']
    phone = data['phone']
    address = message.text

    cart_items = await get_cart_items(user_id)
    logger.info(f"–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {cart_items}")

    if not cart_items:
        await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        await state.clear()
        return

    total_price = sum(item.product.price * item.quantity for item in cart_items)
    logger.info(f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price} —Ä—É–±.")

    order = await create_order(user_id, full_name, phone, address, total_price, cart_items)
    logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: {order}")

    text = f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n" \
           f"üë§ –§–ò–û: {full_name}\n" \
           f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n" \
           f"üìç –ê–¥—Ä–µ—Å: {address}\n" \
           f"üí∞ –°—É–º–º–∞: {total_price} —Ä—É–±.\n\n" \
           f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
        ]
    )

    await message.answer(text, reply_markup=keyboard)
    await state.clear()
